<?php

namespace Payutc\OnyxBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Payutc\OnyxBundle\Entity\Base\Deletable\DeletableEntityRepositoryInterface;
use Payutc\OnyxBundle\Entity\Base\Activable\ActivableEntityRepositoryInterface;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository implements DeletableEntityRepositoryInterface, ActivableEntityRepositoryInterface
{
	/**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
	public function findAll()
	{
		return $this->findAllNotDeleted();
	}

	/**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
	public function findAllNotDeleted()
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('e')
			->from('PayutcOnyxBundle:Event', 'e')
			->where($qb->expr()->isNull('e.removedAt'))
		;

		return $qb->getQuery()->getResult();
	}

	/**
     * Find all entities that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return array
     */
	public function findAllActive()
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('e')
			->from('PayutcOnyxBundle:Event', 'e')
			->where($qb->expr()->isNull('e.removedAt'))
			->andWhere('e.isHidden = :isHidden')
			->setParameter('isHidden', false)
		;

		return $qb->getQuery()->getResult();
	}

	/**
     * Find all entities that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return array
     */
	public function findAllNextActive()
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('e')
			->from('PayutcOnyxBundle:Event', 'e')
			->where($qb->expr()->isNull('e.removedAt'))
			->andWhere('e.isHidden = :isHidden')
			->andWhere('e.endAt > :endAt')
			->setParameter('isHidden', false)
			->setParameter('endAt', new \DateTime())
		;

		return $qb->getQuery()->getResult();
	}

	/**
     * Find one entity by id that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return Event
     */
	public function findOneActive($id)
	{
		$event = null;

		$qb = $this->_em->createQueryBuilder();

		$qb->select('e')
			->from('PayutcOnyxBundle:Event', 'e')
			->where($qb->expr()->isNull('e.removedAt'))
			->andWhere('e.isHidden = :isHidden')
			->andWhere('e.id = :id')
			->setParameter('isHidden', false)
			->setParameter('id', $id)
		;

		try {
			$event = $qb->getQuery()->getSingleResult();
		}
		catch (NoResultException $e) {}

		return $event;
	}
}